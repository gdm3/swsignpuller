plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    // Ensure this version is compatible with your NeoForge version for 1.21.1 if issues persist
    // 7.0.173 should generally be okay, but sometimes aligning closely helps.
    id 'net.neoforged.gradle.userdev' version '7.0.173'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

// Read properties from gradle.properties
version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    // NeoForge Maven is implicitly added by the plugin, but explicit doesn't hurt
    // maven { url = 'https://maven.neoforged.net/releases' }
    // Parchment Maven is needed for mappings
    // maven { url = 'https://maven.parchmentmc.org' }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

// minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    // applies to all the run configs below
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        argument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    // Corrected name for the data generation run configuration
    data {
        // workingDirectory project.file('run-data') // Example override
        arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    // Renamed 'localRuntime' to 'include' which is more conventional for embedding libs,
    // or keep as 'localRuntime' if preferred, just ensure consistency.
    // Let's keep 'localRuntime' as per the original template structure.
    localRuntime // Define the configuration
    runtimeClasspath.extendsFrom localRuntime // Extend runtimeClasspath
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}" // Read from gradle.properties

    // Example optional dependencies (keep commented unless used)
    // compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    // localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId = mod_id // Use mod_id for artifactId usually
            from components.java
            // TODO: Add other artifact information if needed (pom configuration, etc.)
        }
    }
    repositories {
        maven {
            name = "Local" // Give the repo a name
            url = "file://${project.projectDir}/repo"
        }
        // TODO: Add other repositories for publishing if needed
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}